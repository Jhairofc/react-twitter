{"ast":null,"code":"import _defineProperty from\"/Users/jhairorivera/Documents/Cursos/twitter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/jhairorivera/Documents/Cursos/twitter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/jhairorivera/Documents/Cursos/twitter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Row,Col,Form,Spinner,Button}from\"react-bootstrap\";import\"../../scss/Register.scss\";import{values,size}from\"lodash\";import{toast}from\"react-toastify\";import{isEmailValid}from\"../../utils/Validations\";import{RegisterApi}from\"../../api/RegisterAPI\";var Register=function Register(props){var setShow=props.setShow;var _useState=useState(defaultData),_useState2=_slicedToArray(_useState,2),data=_useState2[0],setData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),spinner=_useState4[0],setSpinner=_useState4[1];var onSubmit=function onSubmit(e){e.preventDefault();//Contar si todos los campos fueron llenados\nvar count=0;values(data).some(function(value){value&&count++;return null;});//Validaciones\nif(count!==size(data))//Campos llenos\ntoast.warning(\"Faltan campos que tienen que ser llenados\");else if(!isEmailValid(data.email))//Mail valido\ntoast.warning(\"El correo electrónico no es válido\");else if(data.password!==data.repassword)//Password iguales\ntoast.warning(\"Las contrasenas no coinciden\");else if(size(data.password)<6)// Tamano de la contrasena \ntoast.warning(\"La contrasena debe tener al menos 6 caracteres\");else{//Spinner\nsetSpinner(true);//Consumir el API para registrar el usuario\nRegisterApi(data).then(function(response){if(response.code)//Si el campo code tiene valor hubo un error\ntoast.warning(response.message);else{//Si todo fue OK\nsetShow(false);setData(defaultData);toast.success(\"Se ha registrado de forma correcta!\");}})//Error en el Catch\n.catch(function(error){return toast.error(\"Ha ocurrido un error, intente más tarde\").finally(function(){return setSpinner(false);});});//Finalizado el consumo cerrar el spinner\n}};//Obtener los valores del formulario\n//Esta funcion se carga en el onChange del formulario y captura la data de todos los input, si es de otro tipo se tiene que llamar desde el propio evento onChange de cada componente\nvar onChange=function onChange(e){setData(_objectSpread(_objectSpread({},data),{},_defineProperty({},e.target.name,e.target.value)));};return/*#__PURE__*/React.createElement(\"div\",{className:\"register-form\"},/*#__PURE__*/React.createElement(Form,{onSubmit:onSubmit,onChange:onChange},/*#__PURE__*/React.createElement(Form.Group,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form.Control,{name:\"nombre\",defaultValue:data.nombre,type:\"text\",placeholder:\"Nombres\"})),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form.Control,{name:\"apellido\",defaultValue:data.apellido,type:\"text\",placeholder:\"Apellidos\"})))),/*#__PURE__*/React.createElement(Form.Group,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form.Control,{name:\"email\",defaultValue:data.email,type:\"email\",placeholder:\"Correo Electr\\xF3nico\"})))),/*#__PURE__*/React.createElement(Form.Group,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form.Control,{name:\"password\",defaultValue:data.password,type:\"password\",placeholder:\"Password\"})),/*#__PURE__*/React.createElement(Col,null,/*#__PURE__*/React.createElement(Form.Control,{name:\"repassword\",defaultValue:data.repassword,type:\"password\",placeholder:\"Repetir Password\"})))),/*#__PURE__*/React.createElement(Button,{variant:\"primary\",type:\"Submit\"},!spinner?\"Registrarse\":/*#__PURE__*/React.createElement(Spinner,{animation:\"border\"}))));};export default Register;function defaultData(){return{nombre:\"\",apellido:\"\",email:\"\",password:\"\",repassword:\"\"};}","map":{"version":3,"sources":["/Users/jhairorivera/Documents/Cursos/twitter/src/components/Auth/Register.js"],"names":["React","useState","Row","Col","Form","Spinner","Button","values","size","toast","isEmailValid","RegisterApi","Register","props","setShow","defaultData","data","setData","spinner","setSpinner","onSubmit","e","preventDefault","count","some","value","warning","email","password","repassword","then","response","code","message","success","catch","error","finally","onChange","target","name","nombre","apellido"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {Row, Col, Form, Spinner, Button} from \"react-bootstrap\";\nimport \"../../scss/Register.scss\";\nimport {values, size} from \"lodash\";\nimport {toast} from \"react-toastify\";\nimport {isEmailValid} from \"../../utils/Validations\";\nimport {RegisterApi} from \"../../api/RegisterAPI\";\nconst Register = (props) => {\n    const {setShow} = props;\n    const [data, setData] = useState(defaultData);\n    const [spinner, setSpinner] = useState(false);\n    const onSubmit = (e)=>{\n        e.preventDefault();\n        //Contar si todos los campos fueron llenados\n        let count = 0;\n        values(data).some(value=>{\n            value && count++\n            return null\n        });\n        //Validaciones\n        if(count !== size(data)) //Campos llenos\n            toast.warning(\"Faltan campos que tienen que ser llenados\");\n        else if(!isEmailValid(data.email)) //Mail valido\n            toast.warning(\"El correo electrónico no es válido\");\n            else if(data.password !== data.repassword) //Password iguales\n                toast.warning(\"Las contrasenas no coinciden\");\n                else if(size(data.password) < 6)// Tamano de la contrasena \n                    toast.warning(\"La contrasena debe tener al menos 6 caracteres\");\n                else{\n                    //Spinner\n                    setSpinner(true);\n                    //Consumir el API para registrar el usuario\n                    RegisterApi(data)\n                    .then(response=>{\n                        if(response.code) //Si el campo code tiene valor hubo un error\n                            toast.warning(response.message);\n                        else{ //Si todo fue OK\n                            setShow(false);\n                            setData(defaultData)\n                            toast.success(\"Se ha registrado de forma correcta!\");\n                        }\n                    }) //Error en el Catch\n                    .catch(error=> toast.error(\"Ha ocurrido un error, intente más tarde\")\n                    .finally( ()=> setSpinner(false) )); //Finalizado el consumo cerrar el spinner\n                }\n    };\n    //Obtener los valores del formulario\n        //Esta funcion se carga en el onChange del formulario y captura la data de todos los input, si es de otro tipo se tiene que llamar desde el propio evento onChange de cada componente\n    const onChange = (e) => {\n        setData({...data, [e.target.name]: e.target.value});\n    }\n    return (\n        <div className=\"register-form\">\n            <Form onSubmit={onSubmit} onChange={onChange} >\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"nombre\" defaultValue={data.nombre}\n                            type=\"text\" placeholder=\"Nombres\" />\n                        </Col>\n                        <Col>\n                            <Form.Control name=\"apellido\" defaultValue={data.apellido}\n                            type=\"text\" placeholder=\"Apellidos\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"email\" defaultValue={data.email}\n                            type=\"email\" placeholder=\"Correo Electrónico\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"password\" defaultValue={data.password}\n                            type=\"password\" placeholder=\"Password\" />\n                        </Col>\n                        <Col>\n                            <Form.Control name=\"repassword\" defaultValue={data.repassword}\n                            type=\"password\" placeholder=\"Repetir Password\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"Submit\">\n                    {!spinner ? \"Registrarse\" : <Spinner animation=\"border\" /> }\n                </Button>\n            </Form>\n        </div>\n    );\n}\nexport default Register;\nfunction defaultData(){\n    return ({\n        nombre: \"\",\n        apellido: \"\",\n        email: \"\",\n        password: \"\",\n        repassword: \"\"\n        });\n}"]},"metadata":{},"sourceType":"module"}