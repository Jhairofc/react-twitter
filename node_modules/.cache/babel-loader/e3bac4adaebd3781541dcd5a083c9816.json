{"ast":null,"code":"var _jsxFileName = \"/Users/jhairorivera/Documents/Cursos/twitter/src/components/Register.js\";\nimport React, { useState } from 'react';\nimport { Row, Col, Form, Spinner, Button } from \"react-bootstrap\";\nimport \"../scss/Register.scss\";\nimport { values, size } from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport { isEmailValid } from \"../utils/Validations\";\n\nconst Register = props => {\n  const {\n    setShow\n  } = props;\n  const [data, setData] = useState(defaultData);\n\n  const onSubmit = e => {\n    e.preventDefault(); //Contar si todos los campos fueron llenados\n\n    let count = 0;\n    values(data).some(value => {\n      value && count++;\n      return null;\n    }); //Validaciones\n\n    if (count !== size(data)) //Campos llenos\n      toast.warning(\"Faltan campos que tienen que ser llenados\");else if (!isEmailValid(data.email)) //Mail valido\n      toast.warning(\"El correo electrónico no es válido\");else if (data.password !== data.repassword) //Password iguales\n      toast.warning(\"Las contrasenas no coinciden\");else if (size(data.password) < 6) // Tamano de la contrasena \n      toast.warning(\"La contrasena debe tener al menos 6 caracteres\");else toast.success(\"Formulario correcto\");\n  }; //Obtener los valores del formulario\n  //Esta funcion se carga en el onChange del formulario y captura la data de todos los input, si es de otro tipo se tiene que llamar desde el propio evento onChange de cada componente\n\n\n  const onChange = e => {\n    setData({ ...data,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"register-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: onSubmit,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"nombre\",\n    defaultValue: data.nombre,\n    type: \"text\",\n    placeholder: \"Nombres\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"apellido\",\n    defaultValue: data.apellido,\n    type: \"text\",\n    placeholder: \"Apellidos\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"email\",\n    defaultValue: data.email,\n    type: \"email\",\n    placeholder: \"Correo Electr\\xF3nico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Form.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"password\",\n    defaultValue: data.password,\n    type: \"password\",\n    placeholder: \"Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    name: \"repassword\",\n    defaultValue: data.repassword,\n    type: \"password\",\n    placeholder: \"Repetir Password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 29\n    }\n  })))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"Submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, \"Registrarse\")));\n};\n\nexport default Register;\n\nfunction defaultData() {\n  return {\n    nombre: \"\",\n    apellido: \"\",\n    email: \"\",\n    password: \"\",\n    repassword: \"\"\n  };\n}","map":{"version":3,"sources":["/Users/jhairorivera/Documents/Cursos/twitter/src/components/Register.js"],"names":["React","useState","Row","Col","Form","Spinner","Button","values","size","toast","isEmailValid","Register","props","setShow","data","setData","defaultData","onSubmit","e","preventDefault","count","some","value","warning","email","password","repassword","success","onChange","target","name","nombre","apellido"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {Row, Col, Form, Spinner, Button} from \"react-bootstrap\";\nimport \"../scss/Register.scss\";\nimport {values, size} from \"lodash\";\nimport {toast} from \"react-toastify\";\nimport {isEmailValid} from \"../utils/Validations\";\nconst Register = (props) => {\n    const {setShow} = props;\n    const [data, setData] = useState(defaultData);\n    const onSubmit = (e)=>{\n        e.preventDefault();\n        //Contar si todos los campos fueron llenados\n        let count = 0;\n        values(data).some(value=>{\n            value && count++\n            return null\n        });\n        //Validaciones\n        if(count !== size(data)) //Campos llenos\n            toast.warning(\"Faltan campos que tienen que ser llenados\");\n        else if(!isEmailValid(data.email)) //Mail valido\n            toast.warning(\"El correo electrónico no es válido\");\n            else if(data.password !== data.repassword) //Password iguales\n                toast.warning(\"Las contrasenas no coinciden\");\n                else if(size(data.password) < 6)// Tamano de la contrasena \n                    toast.warning(\"La contrasena debe tener al menos 6 caracteres\");\n                else\n                    toast.success(\"Formulario correcto\");\n    };\n    //Obtener los valores del formulario\n        //Esta funcion se carga en el onChange del formulario y captura la data de todos los input, si es de otro tipo se tiene que llamar desde el propio evento onChange de cada componente\n    const onChange = (e) => {\n        setData({...data, [e.target.name]: e.target.value});\n    }\n    return (\n        <div className=\"register-form\">\n            <Form onSubmit={onSubmit} onChange={onChange} >\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"nombre\" defaultValue={data.nombre}\n                            type=\"text\" placeholder=\"Nombres\" />\n                        </Col>\n                        <Col>\n                            <Form.Control name=\"apellido\" defaultValue={data.apellido}\n                            type=\"text\" placeholder=\"Apellidos\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"email\" defaultValue={data.email}\n                            type=\"email\" placeholder=\"Correo Electrónico\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Control name=\"password\" defaultValue={data.password}\n                            type=\"password\" placeholder=\"Password\" />\n                        </Col>\n                        <Col>\n                            <Form.Control name=\"repassword\" defaultValue={data.repassword}\n                            type=\"password\" placeholder=\"Repetir Password\" />\n                        </Col>\n                    </Row>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"Submit\">Registrarse</Button>\n            </Form>\n        </div>\n    );\n}\nexport default Register;\nfunction defaultData(){\n    return ({\n        nombre: \"\",\n        apellido: \"\",\n        email: \"\",\n        password: \"\",\n        repassword: \"\"\n        });\n}"]},"metadata":{},"sourceType":"module"}