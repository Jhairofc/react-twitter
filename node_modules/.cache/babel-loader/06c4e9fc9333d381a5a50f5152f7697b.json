{"ast":null,"code":"import { LOCALHOST } from \"../utils/Constants\";\nexport function RegisterApi(user) {\n  const uri = `${LOCALHOST}/registro`;\n  const userAPI = { ...user,\n    email: user.email.toLowerCase()\n  }; //Eliminar del json el atributo repassword\n\n  delete userAPI.repassword; //parametros antes de consumir la API\n\n  const params = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: userAPI\n  };\n  console.log(userAPI);\n  /*return fetch(uri, params).then(response=>{\n      if(response.status >200 && response.status < 300)\n          return response.json();\n      return {code: response.status, message: \"Email no disponible\" }\n  })\n  .then(result => result)\n  .catch(error => error); */\n}","map":{"version":3,"sources":["/Users/jhairorivera/Documents/Cursos/twitter/src/api/RegisterAPI.js"],"names":["LOCALHOST","RegisterApi","user","uri","userAPI","email","toLowerCase","repassword","params","method","headers","body","console","log"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,oBAAxB;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA0B;AAC7B,QAAMC,GAAG,GAAI,GAAEH,SAAU,WAAzB;AACA,QAAMI,OAAO,GAAG,EACZ,GAAGF,IADS;AAEZG,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,CAAWC,WAAX;AAFK,GAAhB,CAF6B,CAM7B;;AACA,SAAOF,OAAO,CAACG,UAAf,CAP6B,CAQ7B;;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFE;AAKXC,IAAAA,IAAI,EAAEP;AALK,GAAf;AAOAQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACA;;;;;;;AAUH","sourcesContent":["import {LOCALHOST} from \"../utils/Constants\";\nexport function RegisterApi(user){\n    const uri = `${LOCALHOST}/registro`;\n    const userAPI = {\n        ...user,\n        email: user.email.toLowerCase()\n    }\n    //Eliminar del json el atributo repassword\n    delete userAPI.repassword;\n    //parametros antes de consumir la API\n    const params = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: userAPI\n    }\n    console.log(userAPI);\n    /*return fetch(uri, params).then(response=>{\n        if(response.status >200 && response.status < 300)\n            return response.json();\n        return {code: response.status, message: \"Email no disponible\" }\n    })\n    .then(result => result)\n    .catch(error => error); */\n    \n\n\n}"]},"metadata":{},"sourceType":"module"}