{"ast":null,"code":"import { LOCALHOST, TOKEN } from \"../utils/Constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function LoginApi(login) {\n  const uri = `${LOCALHOST}/login`;\n  const loginAPI = { ...login,\n    email: login.email.toLowerCase()\n  }; //parametros antes de consumir la API\n\n  const params = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(loginAPI)\n  };\n  console.log(uri);\n  console.log(JSON.stringify(loginAPI));\n  return fetch(uri, params).then(response => {\n    if (response.status > 200 && response.status < 300) return response.json();\n    return {\n      code: response.status,\n      message: \"Error al iniciar sesi칩n, usuario i/o contrasena inv치lidos\"\n    };\n  }).then(result => result).catch(error => error);\n}\nexport function setToken(token) {\n  localStorage.setItem(TOKEN, token);\n}\nexport function getToken() {\n  return localStorage.getItem(TOKEN);\n}\nexport function logOut() {\n  localStorage.removeItem(TOKEN);\n}\nexport function isLogged() {\n  //Verificamos si hay token\n  const token = getToken();\n\n  if (!token) {\n    logOut();\n    return null;\n  } //Verificamos si el token ha expirado\n\n\n  if (isTokenExpired(token)) {\n    logOut();\n    return null;\n  } //Si el token sigue activo se retorna el token decodificado\n\n\n  return jwtDecode(token);\n}\nexport function isTokenExpired(token) {\n  console.log('hola');\n  /*const {exp} = jwtDecode(token);\n  const timeToken = exp * 1000; //Se pasa la fecha del token a miliseconds\n  const timeout = timeToken - Date.now(); \n  if(timeout < 0)\n      return true; //Token caducado */\n\n  return true;\n}","map":{"version":3,"sources":["/Users/jhairorivera/Documents/Cursos/twitter/src/api/Login.js"],"names":["LOCALHOST","TOKEN","jwtDecode","LoginApi","login","uri","loginAPI","email","toLowerCase","params","method","headers","body","JSON","stringify","console","log","fetch","then","response","status","json","code","message","result","catch","error","setToken","token","localStorage","setItem","getToken","getItem","logOut","removeItem","isLogged","isTokenExpired"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,KAAnB,QAA+B,oBAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAC3B,QAAMC,GAAG,GAAI,GAAEL,SAAU,QAAzB;AACA,QAAMM,QAAQ,GAAG,EACb,GAAGF,KADU;AAEbG,IAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,CAAYC,WAAZ;AAFM,GAAjB,CAF2B,CAM3B;;AACA,QAAMC,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFE;AAKXC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf;AALK,GAAf;AAOAS,EAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACC,SAAL,CAAeR,QAAf,CAAZ;AACA,SAAOW,KAAK,CAACZ,GAAD,EAAMI,MAAN,CAAL,CAAmBS,IAAnB,CAAwBC,QAAQ,IAAE;AACrC,QAAGA,QAAQ,CAACC,MAAT,GAAiB,GAAjB,IAAwBD,QAAQ,CAACC,MAAT,GAAkB,GAA7C,EACI,OAAOD,QAAQ,CAACE,IAAT,EAAP;AACJ,WAAO;AAACC,MAAAA,IAAI,EAAEH,QAAQ,CAACC,MAAhB;AAAwBG,MAAAA,OAAO,EAAE;AAAjC,KAAP;AACH,GAJM,EAKNL,IALM,CAKDM,MAAM,IAAIA,MALT,EAMNC,KANM,CAMAC,KAAK,IAAIA,KANT,CAAP;AAOH;AACD,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAC3BC,EAAAA,YAAY,CAACC,OAAb,CAAqB7B,KAArB,EAA4B2B,KAA5B;AACH;AACD,OAAO,SAASG,QAAT,GAAmB;AACtB,SAAOF,YAAY,CAACG,OAAb,CAAqB/B,KAArB,CAAP;AACH;AACD,OAAO,SAASgC,MAAT,GAAiB;AACpBJ,EAAAA,YAAY,CAACK,UAAb,CAAwBjC,KAAxB;AACH;AACD,OAAO,SAASkC,QAAT,GAAmB;AACtB;AACA,QAAMP,KAAK,GAAGG,QAAQ,EAAtB;;AACA,MAAG,CAACH,KAAJ,EAAU;AACNK,IAAAA,MAAM;AACN,WAAO,IAAP;AACH,GANqB,CAOtB;;;AACA,MAAGG,cAAc,CAACR,KAAD,CAAjB,EAAyB;AACrBK,IAAAA,MAAM;AACN,WAAO,IAAP;AACH,GAXqB,CAYtB;;;AACA,SAAO/B,SAAS,CAAC0B,KAAD,CAAhB;AACH;AACD,OAAO,SAASQ,cAAT,CAAwBR,KAAxB,EAA8B;AACjCb,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA;;;;;;AAKA,SAAO,IAAP;AACH","sourcesContent":["import {LOCALHOST, TOKEN} from \"../utils/Constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function LoginApi(login){\n    const uri = `${LOCALHOST}/login`;\n    const loginAPI = {\n        ...login,\n        email: login.email.toLowerCase()\n    }\n    //parametros antes de consumir la API\n    const params = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(loginAPI)\n    }\n    console.log(uri);\n    console.log(JSON.stringify(loginAPI));\n    return fetch(uri, params).then(response=>{\n        if(response.status >200 && response.status < 300)\n            return response.json();\n        return {code: response.status, message: \"Error al iniciar sesi칩n, usuario i/o contrasena inv치lidos\"}\n    })\n    .then(result => result)\n    .catch(error => error); \n}\nexport function setToken(token){\n    localStorage.setItem(TOKEN, token);\n}\nexport function getToken(){\n    return localStorage.getItem(TOKEN);\n}\nexport function logOut(){\n    localStorage.removeItem(TOKEN);\n}\nexport function isLogged(){\n    //Verificamos si hay token\n    const token = getToken();\n    if(!token){\n        logOut();\n        return null;\n    }\n    //Verificamos si el token ha expirado\n    if(isTokenExpired(token)){\n        logOut();\n        return null;\n    }\n    //Si el token sigue activo se retorna el token decodificado\n    return jwtDecode(token);\n}\nexport function isTokenExpired(token){\n    console.log('hola');\n    /*const {exp} = jwtDecode(token);\n    const timeToken = exp * 1000; //Se pasa la fecha del token a miliseconds\n    const timeout = timeToken - Date.now(); \n    if(timeout < 0)\n        return true; //Token caducado */\n    return true;\n}"]},"metadata":{},"sourceType":"module"}