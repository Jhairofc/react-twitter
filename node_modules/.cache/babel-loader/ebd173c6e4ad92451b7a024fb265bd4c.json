{"ast":null,"code":"import _objectSpread from\"/Users/jhairorivera/Documents/Cursos/twitter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{LOCALHOST,TOKEN}from\"../utils/Constants\";import jwtDecode from\"jwt-decode\";export function LoginApi(login){var uri=\"\".concat(LOCALHOST,\"/login\");var loginAPI=_objectSpread(_objectSpread({},login),{},{email:login.email.toLowerCase()});//parametros antes de consumir la API\nvar params={method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(loginAPI)};return fetch(uri,params).then(function(response){if(response.status>200&&response.status<300)return response.json();return{code:response.status,message:\"Error al iniciar sesión, usuario i/o contrasena inválidos\"};}).then(function(result){return result;}).catch(function(error){return{code:500,message:\"Ha ocurrido un error, intente más tarde\"};});}export function setToken(token){localStorage.setItem(TOKEN,token);}export function getToken(){return localStorage.getItem(TOKEN);}export function logOut(){localStorage.removeItem(TOKEN);}export function isLogged(){//Verificamos si hay token\nvar token=getToken();if(!token){logOut();return null;}//Verificamos si el token ha expirado\nif(isTokenExpired(token)){logOut();return null;}//Si el token sigue activo se retorna el token decodificado\nreturn jwtDecode(token);}export function isTokenExpired(token){var _jwtDecode=jwtDecode(token),exp=_jwtDecode.exp;var timeToken=exp*1000;//Se pasa la fecha del token a miliseconds\nvar timeout=timeToken-Date.now();if(timeout<0)return true;//Token caducado */\nreturn false;}","map":{"version":3,"sources":["/Users/jhairorivera/Documents/Cursos/twitter/src/api/Login.js"],"names":["LOCALHOST","TOKEN","jwtDecode","LoginApi","login","uri","loginAPI","email","toLowerCase","params","method","headers","body","JSON","stringify","fetch","then","response","status","json","code","message","result","catch","error","setToken","token","localStorage","setItem","getToken","getItem","logOut","removeItem","isLogged","isTokenExpired","exp","timeToken","timeout","Date","now"],"mappings":"kKAAA,OAAQA,SAAR,CAAmBC,KAAnB,KAA+B,oBAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CACA,MAAO,SAASC,CAAAA,QAAT,CAAkBC,KAAlB,CAAwB,CAC3B,GAAMC,CAAAA,GAAG,WAAML,SAAN,UAAT,CACA,GAAMM,CAAAA,QAAQ,gCACPF,KADO,MAEVG,KAAK,CAAEH,KAAK,CAACG,KAAN,CAAYC,WAAZ,EAFG,EAAd,CAIA;AACA,GAAMC,CAAAA,MAAM,CAAG,CACXC,MAAM,CAAE,MADG,CAEXC,OAAO,CAAE,CACL,eAAgB,kBADX,CAFE,CAKXC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAeR,QAAf,CALK,CAAf,CAOA,MAAOS,CAAAA,KAAK,CAACV,GAAD,CAAMI,MAAN,CAAL,CAAmBO,IAAnB,CAAwB,SAAAC,QAAQ,CAAE,CACrC,GAAGA,QAAQ,CAACC,MAAT,CAAiB,GAAjB,EAAwBD,QAAQ,CAACC,MAAT,CAAkB,GAA7C,CACI,MAAOD,CAAAA,QAAQ,CAACE,IAAT,EAAP,CAEJ,MAAO,CAACC,IAAI,CAAEH,QAAQ,CAACC,MAAhB,CAAwBG,OAAO,CAAE,2DAAjC,CAAP,CACH,CALM,EAMNL,IANM,CAMD,SAAAM,MAAM,QAAIA,CAAAA,MAAJ,EANL,EAONC,KAPM,CAOA,SAAAC,KAAK,CAAG,CACX,MAAO,CAACJ,IAAI,CAAE,GAAP,CAAYC,OAAO,CAAE,yCAArB,CAAP,CACH,CATM,CAAP,CAUH,CACD,MAAO,SAASI,CAAAA,QAAT,CAAkBC,KAAlB,CAAwB,CAC3BC,YAAY,CAACC,OAAb,CAAqB3B,KAArB,CAA4ByB,KAA5B,EACH,CACD,MAAO,SAASG,CAAAA,QAAT,EAAmB,CACtB,MAAOF,CAAAA,YAAY,CAACG,OAAb,CAAqB7B,KAArB,CAAP,CACH,CACD,MAAO,SAAS8B,CAAAA,MAAT,EAAiB,CACpBJ,YAAY,CAACK,UAAb,CAAwB/B,KAAxB,EACH,CACD,MAAO,SAASgC,CAAAA,QAAT,EAAmB,CACtB;AACA,GAAMP,CAAAA,KAAK,CAAGG,QAAQ,EAAtB,CACA,GAAG,CAACH,KAAJ,CAAU,CACNK,MAAM,GACN,MAAO,KAAP,CACH,CACD;AACA,GAAGG,cAAc,CAACR,KAAD,CAAjB,CAAyB,CACrBK,MAAM,GACN,MAAO,KAAP,CACH,CACD;AACA,MAAO7B,CAAAA,SAAS,CAACwB,KAAD,CAAhB,CACH,CACD,MAAO,SAASQ,CAAAA,cAAT,CAAwBR,KAAxB,CAA8B,gBACnBxB,SAAS,CAACwB,KAAD,CADU,CAC1BS,GAD0B,YAC1BA,GAD0B,CAEjC,GAAMC,CAAAA,SAAS,CAAGD,GAAG,CAAG,IAAxB,CAA8B;AAC9B,GAAME,CAAAA,OAAO,CAAGD,SAAS,CAAGE,IAAI,CAACC,GAAL,EAA5B,CACA,GAAGF,OAAO,CAAG,CAAb,CACI,MAAO,KAAP,CAAa;AACjB,MAAO,MAAP,CACH","sourcesContent":["import {LOCALHOST, TOKEN} from \"../utils/Constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function LoginApi(login){\n    const uri = `${LOCALHOST}/login`;\n    const loginAPI = {\n        ...login,\n        email: login.email.toLowerCase()\n    }\n    //parametros antes de consumir la API\n    const params = {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(loginAPI)\n    }\n    return fetch(uri, params).then(response=>{\n        if(response.status >200 && response.status < 300)\n            return response.json();\n\n        return {code: response.status, message: \"Error al iniciar sesión, usuario i/o contrasena inválidos\"}\n    })\n    .then(result => result)\n    .catch(error =>{\n        return {code: 500, message: \"Ha ocurrido un error, intente más tarde\"}\n    }); \n}\nexport function setToken(token){\n    localStorage.setItem(TOKEN, token);\n}\nexport function getToken(){\n    return localStorage.getItem(TOKEN);\n}\nexport function logOut(){\n    localStorage.removeItem(TOKEN);\n}\nexport function isLogged(){\n    //Verificamos si hay token\n    const token = getToken();\n    if(!token){\n        logOut();\n        return null;\n    }\n    //Verificamos si el token ha expirado\n    if(isTokenExpired(token)){\n        logOut();\n        return null;\n    }\n    //Si el token sigue activo se retorna el token decodificado\n    return jwtDecode(token);\n}\nexport function isTokenExpired(token){\n    const {exp} = jwtDecode(token);\n    const timeToken = exp * 1000; //Se pasa la fecha del token a miliseconds\n    const timeout = timeToken - Date.now(); \n    if(timeout < 0)\n        return true; //Token caducado */\n    return false;\n}"]},"metadata":{},"sourceType":"module"}